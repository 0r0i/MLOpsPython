pool:
  vmImage: 'Ubuntu 16.04'
#Your build pipeline references a secret variable named ‘sp_username’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it secret. See https://go.microsoft.com/fwlink/?linkid=865972
#Your build pipeline references a secret variable named ‘sp_password’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it secret. See https://go.microsoft.com/fwlink/?linkid=865972
#Your build pipeline references a secret variable named ‘sp_tenantid’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it secret. See https://go.microsoft.com/fwlink/?linkid=865972
#Your build pipeline references a secret variable named ‘subscription_id’. Create or edit the build pipeline for this YAML file, define the variable on the Variables tab, and then select the option to make it secret. See https://go.microsoft.com/fwlink/?linkid=865972

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.6'
    architecture: 'x64'

- script: |
    python -m pip install flake8
    flake8 .
    displayName: 'Run lint tests'
    enabled: false    

- task: Bash@3
  displayName: 'Install Requirements'
  inputs:
    targetType: filePath
    filePath: 'environment_setup/install_requirements.sh'
    workingDirectory: 'environment_setup'

- script: |
   az login --service-principal -u $(sp_username) -p $(sp_password) --tenant $(sp_tenantid)
   
  displayName: 'Login to Azure'

- script: |
   sed -i 's#"subscription_id": "<>"#"subscription_id": "$(subscription_id)"#g' aml_config/config.json
   
  displayName: 'replace subscription value'

- script: 'python code/testing/data_test.py data/diabetes.csv && python code/testing/data_test.py data/diabetes_bad_dist.csv && python code/testing/data_test.py data/diabetes_bad_schema.csv && python code/testing/data_test.py data/diabetes_missing_values.csv'
  displayName: 'Data Quality Check'

- script: |
    pip install pytest
    pip install pytest-cov
    pytest tests --doctest-modules --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html
  displayName: 'Test with pytest'

- script: 'python aml_service/00-WorkSpace.py'
  displayName: 'Get or Create workspace copy'

- script: 'python aml_service/10-TrainOnLocal.py'
  displayName: 'Train on Local'

- script: 'python aml_service/15-EvaluateModel.py'
  displayName: 'Evaluate Model'

- script: 'python aml_service/20-RegisterModel.py'
  displayName: 'Register Model'

- script: 'python aml_service/30-CreateScoringImage.py'
  displayName: 'Creating scoring image'

- task: CopyFiles@2
  displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'
    Contents: '**'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: devops-for-ai'
  inputs:
    ArtifactName: 'devops-for-ai'
    publishLocation: 'container'
    pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
    TargetPath: '$(Build.ArtifactStagingDirectory)'


